import React from 'react';
import { Layout } from 'antd';
import Header from '../organisms/Header';
import ThumbnailList from '../molecules/ThumbnailList';
import CustomAnnotationFooter from '../molecules/CustomAnnotationFooter';
import InteractiveImageViewer from '../molecules/InteractiveImageViewer';
import DamageSelectionWithPopup from '../molecules/DamageSelectionWithPopup';
import { Tag } from '../molecules/SessionCard/SessionTag';

// Import custom hooks
import { useIndicatorState, useVehicleData, useUIState, useDamageOptions } from '../../hooks';

const { Content } = Layout;

const VehicleDamageAnnotationV2: React.FC = () => {
  // Damage options
  const { componentTypes, materialTypes, damageTypeOptions, toolbarButtons: defaultToolbarButtons } = useDamageOptions();
  
  // UI state
  const { 
    isSidebarCollapsed, 
    handleCollapseToggle, 
    handleBack, 
    handleReport 
  } = useUIState();
  
  // Redux state for indicators
  const { 
    activeImageId,
    indicators,
    isAnnotationMode,
    activeDamageType,
    activeComponent,
    showDamageSelectionPopup,
    pendingAnnotation,
    popupInitialValues,
    tempIndicator,
    popupPosition,
    handleImageClick,
    handleIndicatorClick,
    handleIndicatorDoubleClick,
    handleRemoveIndicator,
    handleResetCurrentImage,
    handleToggleAnnotationMode,
    handleSelectDamageType,
    handleSelectComponent,
    handleToolbarAction,
    handleDamageSelectionCancel,
    handleDamageSelectionConfirm,
    setIsAnnotationMode,
    popupRef
  } = useIndicatorState(damageTypeOptions, componentTypes);
  
  // Set default annotation mode to true when component mounts
  React.useEffect(() => {
    console.log("Setting annotation mode to true on mount");
    setIsAnnotationMode(true);
  }, []);
  
  // Vehicle data
  const { 
    vehicleData,
    activeImage,
    sessionId,
    tags,
    timestamp,
    extraThumbnails,
    captionText,
    getActiveViewDetail,
    handleThumbnailClick
  } = useVehicleData(activeImageId);
  
  // Update toolbar buttons with active state
  const toolbarButtons = defaultToolbarButtons.map(btn => {
    if (btn.id === 'move') {
      return { ...btn, active: !isAnnotationMode };
    } 
    if (btn.id === 'annotate') {
      return { ...btn, active: isAnnotationMode };
    }
    return btn;
  });
  
  // Debug tempIndicator
  console.log('VehicleDamageAnnotationV2 rendering with:', { 
    tempIndicator, 
    isAnnotationMode, 
    showDamageSelectionPopup 
  });
  
  return (
    <div className="flex h-screen w-full overflow-hidden">
      {/* Main content area (left part) */}
      <div className={`flex flex-col flex-1 transition-all duration-300 ease-in-out ${isSidebarCollapsed ? 'mr-0' : 'mr-[350px]'}`}>
        {/* Header */}
        <div className="flex-none h-16 px-4 border-b border-gray-200 bg-white z-10">
          <Header
            // Use empty title to trigger SessionCardSVG
            title=""
            sessionId={sessionId}
            tags={tags}
            timestamp={timestamp}
            onBack={handleBack}
            onReport={handleReport}
            onCollapseToggle={handleCollapseToggle}
          />
        </div>

        {/* Center content with left sidebar and main viewer */}
        <div className="flex flex-1 overflow-hidden pl-[12px] items-center relative">
          {/* Sidebar Left - Thumbnail List */}
          <div className="w-[84px] bg-white flex flex-col justify-center">
            <ThumbnailList
              thumbnails={vehicleData.images}
              activeId={activeImageId || ''}
              onSelect={handleThumbnailClick}
            />
          </div>

          {/* Main Viewer with annotation capability */}
          <div className="flex-1 overflow-auto flex items-center justify-center py-2 relative">
            <InteractiveImageViewer
              src={activeImage?.src || ''}
              alt={activeImage?.alt}
              indicators={indicators}
              isInteractionEnabled={isAnnotationMode}
              onImageClick={handleImageClick}
              onIndicatorClick={handleIndicatorClick}
              onIndicatorDoubleClick={handleIndicatorDoubleClick}
            />
            
            {/* Debug indicator count */}
            <div className="absolute top-2 left-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs">
              Indicators: {indicators.length}
            </div>
            
            {/* Debug buttons - chỉ show nút log state */}
            <div className="absolute top-2 right-2 flex flex-col gap-2">
              <button
                className="bg-blue-500 text-white text-xs px-3 py-1 rounded"
                onClick={() => {
                  console.log('Current state:');
                  console.log('Active image:', activeImageId);
                  console.log('Indicators:', indicators);
                }}
              >
                Log State
              </button>
            </div>
            
            {/* Hiển thị indicator tạm thời */}
            {tempIndicator && (
              <div 
                className="absolute transform -translate-x-1/2 -translate-y-1/2 z-30"
                style={{
                  left: `${tempIndicator.x}%`,
                  top: `${tempIndicator.y}%`,
                  transition: 'all 0.1s ease-out'
                }}
              >
                <div
                  className="w-6 h-6 rounded-full border-2 border-white"
                  style={{
                    backgroundColor: tempIndicator.color || '#ef4444',
                    boxShadow: '0 0 0 1px rgba(0,0,0,0.2)'
                  }}
                />
                <div
                  className="absolute inset-0 rounded-full animate-pulse opacity-70"
                  style={{
                    border: `2px solid ${tempIndicator.color || '#ef4444'}`,
                    transform: 'scale(1.15)',
                  }}
                />
              </div>
            )}
            
            {/* Debug tempIndicator value */}
            <div className="absolute bottom-2 left-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs">
              tempIndicator: {tempIndicator ? `(${tempIndicator.x.toFixed(1)}%, ${tempIndicator.y.toFixed(1)}%)` : 'null'}
            </div>
            
            {/* Damage Selection Popup */}
            {showDamageSelectionPopup && popupPosition && (
              <div 
                className="absolute animate-popup-appear" 
                style={{
                  left: `${popupPosition.popupLeft}px`,
                  top: `${popupPosition.popupTop}px`,
                  zIndex: 40,
                  margin: 0,
                  padding: 0,
                  border: 'none',
                  filter: 'none',
                  transition: 'all 0.2s cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                  transformOrigin: popupPosition.arrowPosition === 'left' ? 'left center' : 
                                  popupPosition.arrowPosition === 'right' ? 'right center' : 
                                  popupPosition.arrowPosition === 'top' ? 'center top' : 'center bottom'
                }}
              >
                <DamageSelectionWithPopup
                  ref={popupRef}
                  onCancel={handleDamageSelectionCancel}
                  onConfirm={handleDamageSelectionConfirm}
                  damageTypeOptions={damageTypeOptions}
                  componentOptions={componentTypes}
                  materialOptions={materialTypes}
                  initialValues={popupInitialValues}
                  arrowPosition={popupPosition.arrowPosition}
                />
              </div>
            )}
          </div>
        </div>

        {/* Footer with annotation controls - using CustomAnnotationFooter */}
        <div className="flex-none border-t border-gray-200">
          <CustomAnnotationFooter
            captionText={captionText}
            extraThumbnails={extraThumbnails}
            onThumbnailClick={handleThumbnailClick}
            onToolbarAction={handleToolbarAction}
            toolbarButtons={toolbarButtons}
            isAnnotationMode={isAnnotationMode}
          />
        </div>
      </div>

      {/* Enhanced Sidebar Right with tabs - Full height with fixed footer */}
      <div className={`absolute top-0 right-0 w-[350px] h-full flex flex-col border-l border-gray-200 bg-white transition-all duration-300 ease-in-out ${isSidebarCollapsed ? 'translate-x-full' : 'translate-x-0'}`}>
        <div className="flex-1 overflow-y-auto space-y-4 relative">
          {/* Title with view state */}
          <div className="flex items-center justify-between p-4 border-b border-gray-200">
            <h2 className="text-lg font-medium text-gray-800">{getActiveViewDetail()}</h2>
            <div className="flex items-center">
              <button className="p-1" onClick={handleCollapseToggle}>
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                  <line x1="9" y1="3" x2="9" y2="21" />
                </svg>
              </button>
            </div>
          </div>

          <div className="px-4">
            {/* Damage Selection section removed */}

            {/* Annotation mode toggle button removed */}

            {/* Damage list - title removed */}
            <div className="pt-4">
              {/* Damage List title removed */}

              {/* Show message when no annotations */}
              {indicators.length === 0 ? (
                <div className="text-center p-4 text-gray-500 bg-gray-50 rounded-md">
                  <p className="text-sm">No damage annotations yet</p>
                  <p className="text-xs mt-1">Click on the image in annotation mode to add damage</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {indicators.map((indicator, index) => (
                    <div 
                      key={indicator.id}
                      className={`rounded-md border overflow-hidden cursor-pointer ${
                        indicator.isHighlighted ? 'ring-2 ring-blue-300 border-blue-300' : 'border-gray-200'
                      }`}
                      onClick={() => handleIndicatorClick(indicator.id)}
                    >
                      <div className="flex items-center px-3 py-2 bg-gray-50">
                        <div 
                          className="flex items-center justify-center h-6 w-6 rounded-full text-xs font-medium mr-2" 
                          style={{ 
                            backgroundColor: `${indicator.color}20`, 
                            color: indicator.color 
                          }}
                        >
                          {(index + 1).toString().padStart(2, '0')}
                        </div>
                        <div className="flex-1 text-sm font-medium">
                          {indicator.damageType ? 
                            damageTypeOptions.find(dt => dt.id === indicator.damageType)?.label || 'DAMAGE' :
                            'DAMAGE'
                          }
                        </div>
                      </div>
                      <div className="px-3 py-2 border-t border-gray-200">
                        {indicator.component && (
                          <div className="flex items-center mb-1">
                            <span className="inline-block h-4 w-4 mr-2">
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                                <path d="M7 7h.01" />
                                <path d="M17 7h.01" />
                                <path d="M7 17h.01" />
                                <path d="M17 17h.01" />
                              </svg>
                            </span>
                            <span className="text-sm text-gray-600">
                              {componentTypes.find(c => c.id === indicator.component)?.label || 'COMPONENT'}
                            </span>
                          </div>
                        )}
                        <div className="text-xs text-gray-500 mt-1">
                          Position: ({indicator.x.toFixed(1)}%, {indicator.y.toFixed(1)}%)
                          {indicator.severity && <span className="ml-2">• Severity: {indicator.severity.toUpperCase()}</span>}
                          {indicator.throughPaint && <span className="ml-2">• Through Paint</span>}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Fixed footer with buttons */}
        <div className="flex-none p-4 border-t border-gray-200">
          <button 
            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-md font-medium transition"
            onClick={indicators.length > 0 ? handleResetCurrentImage : undefined}
            disabled={indicators.length === 0}
          >
            Finish [F]
          </button>
        </div>
      </div>
    </div>
  );
};

export default VehicleDamageAnnotationV2;