#!/usr/bin/env node
// bypass-build.cjs - B·ªè qua TypeScript ho√†n to√†n trong qu√° tr√¨nh build
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üî® Starting build with permissive TypeScript settings...');

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn c√°c file c·∫•u h√¨nh
const originalTsConfigPath = path.join(process.cwd(), 'tsconfig.json');
const vercelTsConfigPath = path.join(process.cwd(), 'tsconfig.vercel.json');
const backupTsConfigPath = path.join(process.cwd(), 'tsconfig.original.json');

try {
  // Backup file tsconfig.json g·ªëc
  if (fs.existsSync(originalTsConfigPath)) {
    console.log('Backing up original tsconfig.json...');
    fs.copyFileSync(originalTsConfigPath, backupTsConfigPath);
  }

  // Thay th·∫ø b·∫±ng file tsconfig.vercel.json
  if (fs.existsSync(vercelTsConfigPath)) {
    console.log('Using tsconfig.vercel.json for build...');
    fs.copyFileSync(vercelTsConfigPath, originalTsConfigPath);
  }

  // Ch·∫°y build v·ªõi c·∫•u h√¨nh TypeScript l·ªèng l·∫ªo
  execSync('npx vite build', {
    stdio: 'inherit',
    env: {
      ...process.env,
      NODE_ENV: 'production',
    },
  });

  console.log('‚úÖ Build completed successfully!');
} catch (error) {
  console.error('‚ùå Build failed:', error);
  process.exit(1);
} finally {
  // Kh√¥i ph·ª•c l·∫°i file tsconfig.json g·ªëc
  if (fs.existsSync(backupTsConfigPath)) {
    console.log('Restoring original tsconfig.json...');
    fs.copyFileSync(backupTsConfigPath, originalTsConfigPath);
    fs.unlinkSync(backupTsConfigPath);
  }
}
